# Last edited 03/03/2021 Gerhard Malberg

# This is instruction to setup development environment on Nvidia Jetson Nano Dev Kit
# and to build, compile and run cmake project of DJI Onboard SDK (OSDK) 3.9.0
# DJI M100 is only compatible with OSDK 3.9.0 and NOT newer.
# This build is made to Nvidia Jetson Nano Dev kit Ubuntu 18.04 LTS Desktop version.
# Simply run commands in sequence written to this text file to avoid issues.

# THIS PART IS TO SETUP LINUX FOR DEVELOPMENT PROJECTS
#
#
#

# Install gcc compiler
sudo apt install build-essential

# Install Codeblocks
sudo apt install codeblocks

# Install nano
sudo apt install nano

# Install emacs
sudo apt-get install emacs

# Install Python
sudo apt install build-essential zlib1g-dev \
libncurses5-dev libgdbm-dev libnss3-dev \
libssl-dev libreadline-dev libffi-dev curl

sudo apt-get install python
sudo apt-get install python3

# Python package Install
sudo apt-get install python-pip

# SDL2 packages
sudo apt-get install libsdl2-dev

# Install necessary packages for OpenSSL
sudo apt update
sudo apt install build-essential checkinstall zlib1g-dev -y

# If problem occours check https://www.howtoforge.com/tutorial/how-to-install-openssl-from-source-on-linux/

# Download OpenSSL and install it
cd /usr/local/src/
sudo wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz
sudo tar -xf openssl-1.0.2o.tar.gz
cd openssl-1.0.2o
cd /usr/local/src/openssl-1.0.2o
sudo ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib
sudo make
sudo make test
sudo make install
cd /etc/ld.so.conf.d/
nano openssl-1.0.2o.conf
# Paste "/usr/local/ssl/lib" without quotations to file, save and close it
sudo ldconfig -v
nano /etc/environment
# Now to file, add directory as below (as it is), save and close it
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/ssl/bin"
# Navigate to root
cd /
source /etc/environment
echo $PATH
which openssl
openssl version -a
# Now you should see respond which starts with "OpenSSL 1.0.2 and so on....."

# This part is to setup VNC
#
#
#

# Download and install VNC
sudo apt update
sudo apt install xfce4 xfce4-goodies
sudo apt install tightvncserver

# Run VNC for first time (for first time fill in your password)
vncserver

# You should now see this
Would you like to enter a view-only password (y/n)? n
xauth:  file /home/sammy/.Xauthority does not exist

New 'X' desktop is your_hostname:1

Creating default startup script /home/sammy/.vnc/xstartup
Starting applications specified in /home/sammy/.vnc/xstartup
Log file is /home/sammy/.vnc/your_hostname:1.log

# kill VNC process, backup and configure files
vncserver -kill :1
mv ~/.vnc/xstartup ~/.vnc/xstartup.bak

nano ~/.vnc/xstartup
# This how your file should look like
#!/bin/sh

xrdb $HOME/.Xresources
xsetroot -solid grey
#x-terminal-emulator -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
#x-window-manager &
# Fix to make GNOME work
export XKL_XMODMAP_DISABLE=1
/etc/X11/Xsession
exec /usr/bin/startxfce4 &

# Save and exit
# Give xstartup permission
sudo chmod +x ~/.vnc/xstartup

# Restart server
vncserver
# You should see this
New 'X' desktop is your_hostname:1

Starting applications specified in /home/sammy/.vnc/xstartup
Log file is /home/sammy/.vnc/your_hostname:1.log

# On windows PC follow this
https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-20-04

# Remember to set set in putty following configuration
Source port: 5901
Destination: localhost:5901

# Then open tightvnc viewer and login using your password 
# (onboard computer password = 88888888)



# THIS PART IS TO BUILD, COMPILE AND RUN OSDK SAMPLE
# DRONE NEED TO BE CONNECTED TO ONBOARD COMPUTER IN THIS PART
#
#

# Add user to dialout group 
sudo usermod -a -G dialout $USER
# Replace $USER with username for example our onboard computer user name is uwb5 thereby
sudo usermod -a -G dialout uwb5

# Create a udev file called DJIDevice.rules inside /etc/udev/rules.d/
# Add SUBSYSTEM=="usb", ATTRS{idVendor}=="2ca3", MODE="0666"

# Give user access to serial port (xxx = ttyACM0 by default)
sudo chmod 777 /dev/xxx

# Check user access status for serial port (remember to navigate to root directory)
cd /
ls -l /dev/xxx

# Run following command to install needed packages for FFMPEG
sudo apt install libavcodec-dev libavformat-dev libavfilter-dev

# Install more development packages 
sudo apt-get install libpcap-dev libssl-dev

# Make directory for cmake build
mkdir uwb

# Go to directory "uwb" and clone OSDK git repository 
# MAKE SURE YOU CLONE 3.9.0 other versions do not work
cd uwb
git clone https://github.com/dji-sdk/Onboard-SDK.git --branch 3.9.0

# Go to directory "uwb/Onboard-SDK" and make directory named "build"
cd
cd uwb/Onboard-SDK
mkdir build

# Go to directory "build" and make CMake project build into that directory
cd build
cmake ..

# Compile using makefiles
make

# Go to your sample directory and git-clone UserConfig.txt
# Check that everything matches your setup in the UserConfig.txt file (Default should match)
cd uwb/Onboard-SDK/build/bin/
git clone xxxx
nano UserConfig.txt

# UserConfig.txt should look like this
app_id : 1101325
app_key : 2fc591d88512403919e1b76fb8301a2432e9d3861f369a77ac8acf4bc804a5b6
device : /dev/ttyUSB0
baudrate : 921600
acm_port : /dev/ttyACM0

# Navigate to test sample in bin directory
cd
cd uwb/Onboard-SDK/build/bin/

# Execute the test sample
./djiosdk-logging-sample UserConfig.txt

# First line should look like this
STATUS/1 @ main, L40: Logging is completely independent of DJI::OSDK::Vehicle.



















# Git Commands
# ONLY USE THESE COMMANDS IF NEEDED
#
#

# Initilize directory as git repository
git init

# Get your remote repository to local repository
git remote add origin 'your_url_name'

# Git show origin URL
git remote show origin

# Set new orgin
git remote set-url origin git://new.url.here

# Git fetch and checkout (Our case myBranch is "master"
git fetch --all
git checkout Master

# Get status of commits
git status

# Add edited files to commit list
git add .

# Commit and add you message
git commit -m 'Just added the test333'

# Push your commit to to git
git push -u origin master

# Check information about the commits
git log

# Revert your local repo to specific commit and clean 
git reset --hard <commit-hash>

# Push your reverted to main
git push -f origin master

# For untracked modules/libraries
git rm -rf --cached myuntrackedfolder
git add myuntrackedfolder



































# SKIP THIS IF ROS NOT USED

# ROS install
https://www.stereolabs.com/blog/ros-and-nvidia-jetson-nano/

https://developer.dji.com/onboard-sdk/documentation/quickstart/development-environment.html

# SDL2 packages
sudo apt-get install libsdl2-dev

# ROSDEP package Install
sudo apt-get install python-pip
sudo pip install -U rosdep
sudo rosdep init
rosdep update
sudo pip install -U rosinstall vcstools rospkg
sudo apt-get install python-rosdep

#NMEA Packages
sudo apt-get install ros-melodic-nmea-msgs






